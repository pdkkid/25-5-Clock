{"version":3,"sources":["components/footer/footer.tsx","atom.tsx","sounds/alarm.mp3","components/clock/clock.tsx","components/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["SourceLink","styled","div","Footer","href","target","rel","ClockAtom","atom","key","default","paused","started","session","break","onBreak","CounterAtom","LengthSelectionContainer","LengthSelection","Timer","Button","button","useTimer","timer","useRef","useSound","alarmSound","interrupt","play","stop","useRecoilState","clock","setClock","counter","setCounter","useEffect","current","setTimeout","Stop","clearTimeout","Start","Reset","Clock","time","handleBreak","val","handleSession","onClick","Math","floor","toString","padStart","disabled","App","AppContainer","Title","a","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3f1183b1.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst SourceLink = styled.div`\n  width: 100%;\n  text-align: center;\n  padding-bottom: 20px;\n  a {\n    position:absolute;\n    right:0;\n    bottom:0;\n    margin: .5em;\n    padding: .1em .5em;\n    background-color: #40798C;\n    border: 2px solid #40798C;\n    border-radius: 4px;\n    user-select: none;\n    color: #CFD7C7;\n    font-size: 1.25em;\n    font-weight: 300;\n    text-decoration: none;\n    :hover {\n      border-color:#4391ab;\n      color: #F6F1D1;\n    }\n    :active{\n    background-color:#70A9A1;\n    }\n  }\n`;\n\nexport const Footer = (): JSX.Element => {\n  return (\n    <SourceLink>\n      <a href=\"https://github.com/pdkkid/25-5-Clock\" target=\"_blank\" rel=\"noreferrer noopener\">Source</a>\n    </SourceLink>\n  );\n};\n","import { atom } from \"recoil\";\n\nexport const ClockAtom = atom({\n    key: 'clock',\n    default: {\n        paused: true,\n        started: false,\n        session: 25,\n        break: 5,\n        onBreak: false,\n    },\n})\n\nexport const CounterAtom = atom({\n    key: 'counter',\n    default: 20,\n});","export default __webpack_public_path__ + \"static/media/alarm.9c5eda12.mp3\";","import { Fragment, useEffect, useRef } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ClockAtom, CounterAtom } from \"../../atom\";\nimport { TimerType } from \"./clock.types\";\nimport useSound from 'use-sound';\nimport alarmSound from '../../sounds/alarm.mp3';\n\nconst LengthSelectionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LengthSelection = styled.div`\n  padding: 20px;\n  margin: 50px 20px;\n  font-size: 1.25em;\n  text-align: center;\n  border: 4px solid #40798c;\n  border-radius: 5px;\n  div {\n    display: flex;\n    flex-direction: row;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    p {\n      padding: 0 8px;\n    }\n  }\n`;\n\nconst Timer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  div {\n    min-width: 200px;\n    width: 35%;\n    padding: 15px 0 15px 0;\n    font-size: 1.75em;\n    border: 6px solid #40798c;\n    border-radius: 10px;\n    p {\n      font-size: 1.75em;\n    }\n    button {\n      margin: 0 8px 0 8px;\n    }\n  }\n`;\n\nconst Button = styled.button`\n  border:1.5px solid #40798C;\n  border-radius: 6px;\n  text-decoration:none;\n  color:#CFD7C7;\n  background-color:#40798C;\n  text-align:center;\n  padding: 4px 8px;\n  font-weight: 500;\n  font-size: .75em;\n  :hover:enabled{\n    border-color:#4391ab;\n    color: #F6F1D1;\n  }\n  :active{\n    background-color:#70A9A1;\n  }\n  :disabled{\n    opacity: 50%;\n    cursor: not-allowed;\n    pointer-events: all !important;\n  }\n`;\n\nconst useTimer = (): TimerType => {\n  const timer = useRef<unknown>(null);\n\n  const [ play, { stop } ] = useSound(alarmSound, {interrupt: false})\n  const [clock, setClock] = useRecoilState(ClockAtom);\n  const [counter, setCounter] = useRecoilState(CounterAtom);\n\n  const timerEnd = () => {\n    if (clock.onBreak) {\n      play()\n      setCounter(clock.session * 60);\n      setClock({ ...clock, onBreak: false});\n    } else {\n      play()\n      setCounter(clock.break * 60);\n      setClock({ ...clock, onBreak: true});\n    }\n  };\n\n  const stopCounter = () => {\n    clearTimeout(timer.current as number);\n    setClock({ ...clock, paused: true });\n  };\n\n  const startCounter = () => {\n    setClock({ ...clock, paused: false, started: true });\n  };\n\n  const reset = () => {\n    stop()\n    clearTimeout(timer.current as number);\n    setCounter(clock.session * 60);\n    setClock({ ...clock, onBreak: false, paused: true, started: false});\n  };\n\n  useEffect(() => {\n    if (!clock.paused) {\n      if (counter <= 0) {\n        timerEnd();\n        return;\n      }\n      timer.current = setTimeout(() => setCounter(counter - 30), 1000);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clock.paused, counter, setCounter]);\n\n  return {\n    Stop: stopCounter,\n    Start: startCounter,\n    Reset: reset,\n  };\n};\n\nconst getTime = (time: number): string => {\n  var m: string = Math.floor(time / 60)\n      .toString()\n      .padStart(2, \"0\"),\n    s: string = Math.floor(time % 60)\n      .toString()\n      .padStart(2, \"0\");\n\n  return m + \":\" + s;\n};\n\nexport const Clock = (): JSX.Element => {\n  const [clock, setClock] = useRecoilState(ClockAtom);\n  const [counter, setCounter] = useRecoilState(CounterAtom); \n  useEffect(() => {\n    if (!clock.started) {\n      setCounter(clock.session * 60);\n    }\n  }, [clock.started, clock.session, setCounter]);\n\n  const timer = useTimer();\n\n  const handleBreak = (val: number) => {\n    if (clock.break + val <= 0 || clock.break + val > 60) {\n      return;\n    }\n    setClock({ ...clock, break: clock.break + val });\n  };\n\n  const handleSession = (val: number) => {\n    if (clock.session + val <= 0 || clock.session + val > 60) {\n      return;\n    }\n    setClock({ ...clock, session: clock.session + val });\n  };\n\n  return (\n    <Fragment>\n      <LengthSelectionContainer>\n        <LengthSelection>\n          <p>Break Length</p>\n          <div>\n          <Button onClick={() => handleBreak(-1)}>{'<'}</Button>\n          <p>{clock.break}</p>\n          <Button onClick={() => handleBreak(1)}>{'>'}</Button>\n          </div>\n        </LengthSelection>\n        <LengthSelection>\n          <p>Session Length</p>\n          <div>\n          <Button onClick={() => handleSession(-1)}>{'<'}</Button>\n          <p>{clock.session}</p>\n          <Button onClick={() => handleSession(1)}>{'>'}</Button>\n          </div>\n        </LengthSelection>\n      </LengthSelectionContainer>\n      <Timer>\n        <div>\n          {clock.onBreak ? \"Break\" : \"Session\"}\n          <p>{getTime(counter)}</p>\n          <Button disabled={clock.paused} onClick={() => timer.Stop()}>\n            Stop\n          </Button>\n          <Button disabled={!clock.paused} onClick={() => timer.Start()}>\n            Start\n          </Button>\n          <Button disabled={!clock.started} onClick={() => timer.Reset()}>\n            Reset\n          </Button>\n        </div>\n      </Timer>\n    </Fragment>\n  );\n};\n","import { Footer } from \"./footer\";\nimport { Clock } from \"./clock\";\nimport styled from \"styled-components\";\n\nexport const App = (): JSX.Element => {\n  return (\n    <AppContainer>\n      <Title>25 + 5 Clock</Title>\n      <Clock />\n      <Footer />\n    </AppContainer>\n  );\n};\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: #cfd7c7;\n  user-select: none;\n`;\n\nconst Title = styled.a`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  font-size: 3.5em;\n  padding-top: 20px;\n`;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL!,\n        window.location.toString()\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a 'New content is\n                  // available; please refresh.' message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // 'Content is cached for offline use.' message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          }\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type')!.indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    background: #1A1B25;\n    font-family: \"Open Sans\", sans-serif !important;\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <GlobalStyle/>\n      <App/>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}