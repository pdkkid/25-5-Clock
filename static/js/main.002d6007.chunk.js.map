{"version":3,"sources":["components/footer/footer.tsx","components/clock/clock.tsx","components/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["SourceLink","styled","a","Footer","href","target","rel","Clock","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mLAEMA,EAAaC,IAAOC,EAAV,qMAYHC,EAAS,WACpB,OACE,cAACH,EAAD,CACEI,KAAK,uCACLC,OAAO,SACPC,IAAI,sBAHN,qBChBSC,EAAQ,WACjB,OACI,iDCEKC,EAAM,WACjB,OACI,eAAC,WAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGFC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAgCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,6CAOvBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCtEnE,IAAMC,EAAcC,YAAH,2IAQjBC,IAASC,OACP,eAAC,IAAMC,WAAP,WACI,cAACJ,EAAD,IACA,cAAC,EAAD,OAEJK,SAASC,eAAe,SDET,WACb,GAA6C,kBAAmBrB,UAAW,CAMzE,GAJkB,IAAIsB,IACpBC,cACA7B,OAAOC,SAAS6B,YAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,cAAN,sBAEN/B,EA0CX,SAAiCO,GAE/B4B,MAAM5B,GACHI,MAAK,SAAAyB,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BT,OAAOC,SAASwC,eAKpBrC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEA3DAwB,CAAwBrC,GAHxBD,EAAgBC,OCnB1BsC,K","file":"static/js/main.002d6007.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst SourceLink = styled.a`\n  user-select: none;\n  font-size: 1em;\n  font-weight: 400;\n  justify-self: left;\n  color: #ecf0f1;\n  text-decoration: none;\n  &:hover {\n    color: #ddffbc;\n  }\n`;\n\nexport const Footer = (): JSX.Element => {\n  return (\n    <SourceLink\n      href=\"https://github.com/pdkkid/25-5-Clock\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      Source\n    </SourceLink>\n  );\n};\n","export const Clock = (): JSX.Element => {\n    return (\n        <p>Clock goes here</p>\n    );\n};","import React, { Fragment } from \"react\";\nimport { Footer } from \"./footer\";\nimport { Clock } from \"./clock\";\n\nexport const App = (): JSX.Element => {\n  return (\n      <Fragment>\n        <Clock />\n        <Footer />\n      </Fragment>\n  );\n};\n\n\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL!,\n        window.location.toString()\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a 'New content is\n                  // available; please refresh.' message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // 'Content is cached for offline use.' message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          }\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type')!.indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    background: #95a5a6;\n    font-family: \"Open Sans\", sans-serif !important;\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n      <GlobalStyle/>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}